// local-server.js
const express = require('express');
const http = require('http');
const mongoose = require('mongoose');
const bodyParser = require('body-parser');
const cors = require('cors');
const path = require('path');
const socketIO = require('socket.io');
const { io: socketIOClient } = require('socket.io-client'); // Değişiklik burada - io adını socketIOClient olarak import et
const https = require('https');
require('dotenv').config();

// Express uygulaması oluştur
const app = express();
const server = http.createServer(app);

// Middleware
app.use(cors());
app.use(bodyParser.json());
app.use(bodyParser.urlencoded({ extended: true }));
app.use(express.static(path.join(__dirname, 'public')));

// MongoDB bağlantısı - Geliştirilmiş hata yakalama ve loglama ile
const connectDB = async () => {
    try {
        const conn = await mongoose.connect(process.env.MONGODB_URI || 'mongodb://localhost:27017/bildirim_db', {
            useNewUrlParser: true,
            useUnifiedTopology: true
        });
        console.log(`MongoDB bağlantısı başarılı: ${conn.connection.host}`);
        
        // Bağlantı açık mı test et
        const collections = await mongoose.connection.db.listCollections().toArray();
        console.log(`Veritabanında ${collections.length} koleksiyon bulundu.`);
        return true;
    } catch (err) {
        console.error('MongoDB bağlantı hatası:', err);
        console.error('Hata detayları:', Object.keys(err));
        console.error('Hata mesajı:', err.message);
        console.error('Hata kodu:', err.code);
        // Process.exit yerine false döndür
        return false;
    }
};

// Veritabanı bağlantısını başlat
const dbConnected = connectDB();

// Kullanıcı Şeması ve Modeli
const userSchema = new mongoose.Schema({
    email: {
        type: String,
        required: true,
        unique: true
    },
    roleTopic: {
        type: String,
        required: true
    },
    periodTopic: {
        type: String,
        required: true
    },
    token: {
        type: String,
        required: true
    },
    createdAt: {
        type: Date,
        default: Date.now
    },
    updatedAt: {
        type: Date,
        default: Date.now
    }
});

// MongoDB bağlantı hatası durumunda model oluşturma hatasını önle
const User = mongoose.connection.readyState === 1 
    ? mongoose.model('User', userSchema)
    : null;

// In-memory kullanıcı deposu (MongoDB bağlantısı olmadığında)
const inMemoryUsers = new Map();

// Socket.IO client - Render'daki backend'e bağlanma - Geliştirilmiş bağlantı ayarları
const renderBackendUrl = process.env.RENDER_BACKEND_URL || 'https://fcm-backend.onrender.com';

// Özel HTTP başlıkları ve ajanı oluştur
const customHeaders = {
    'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/132.0.0.0 Safari/537.36'
};

const customAgent = new https.Agent({
    rejectUnauthorized: false // Kısıtlı ağlarda sertifika hatalarını atla
});

// Socket.IO client bağlantısı - kısıtlı ağlar için özel ayarlarla
const socketClient = socketIOClient(renderBackendUrl, {
    extraHeaders: customHeaders,
    agent: customAgent,
    reconnection: true,
    reconnectionAttempts: 10,
    reconnectionDelay: 5000
});

socketClient.on('connect', () => {
    console.log('Render backend\'e Socket.IO bağlantısı kuruldu');
});

socketClient.on('disconnect', () => {
    console.log('Render backend\'den bağlantı kesildi');
});

socketClient.on('connect_error', (error) => {
    console.error('Socket.IO bağlantı hatası (connect_error):', error.message);
});

socketClient.on('error', (error) => {
    console.error('Socket.IO genel hata:', error);
});

// Render backend'den gelen kullanıcı kayıt isteklerini dinle
socketClient.on('register-user-http', async (userData) => {
    try {
        console.log('Render backend\'den kullanıcı kayıt isteği:', userData);

        // Gerekli alanların doğrulaması
        const { email, roleTopic, periodTopic, token } = userData;

        // Email ve token kontrolü
        if (!email || !token) {
            console.error('Email ve token zorunludur');
            return;
        }

        // MongoDB veya in-memory depolama kullan
        if (User) {
            // MongoDB bağlantısı varsa
            try {
                // Kullanıcı var mı kontrol et
                const existingUser = await User.findOne({ email });

                if (existingUser) {
                    // Kullanıcı varsa güncelle
                    existingUser.roleTopic = roleTopic;
                    existingUser.periodTopic = periodTopic;
                    existingUser.token = token;
                    existingUser.updatedAt = Date.now();

                    await existingUser.save();
                    console.log(`Kullanıcı güncellendi (MongoDB): ${email}`);
                } else {
                    // Yeni kullanıcı oluştur
                    const newUser = new User({
                        email,
                        roleTopic,
                        periodTopic,
                        token
                    });

                    await newUser.save();
                    console.log(`Yeni kullanıcı kaydedildi (MongoDB): ${email}`);
                }
            } catch (dbError) {
                console.error('MongoDB işlemi sırasında hata:', dbError);
                // Hata durumunda in-memory'ye kaydet
                saveUserToMemory(userData);
            }
        } else {
            // MongoDB bağlantısı yoksa in-memory'de sakla
            saveUserToMemory(userData);
        }
    } catch (error) {
        console.error('Kullanıcı kayıt hatası:', error);
    }
});

// In-memory kullanıcı kaydetme fonksiyonu
function saveUserToMemory(userData) {
    const { email, roleTopic, periodTopic, token } = userData;
    
    inMemoryUsers.set(email, {
        email,
        roleTopic,
        periodTopic,
        token,
        createdAt: inMemoryUsers.has(email) ? inMemoryUsers.get(email).createdAt : new Date(),
        updatedAt: new Date()
    });
    
    console.log(`Kullanıcı in-memory depolandı: ${email}`);
}

// Render backend'den gelen token güncelleme isteklerini dinle
socketClient.on('update-token-http', async (updateData) => {
    try {
        console.log('Render backend\'den token güncelleme isteği:', updateData);

        const { email, token } = updateData;

        if (!email || !token) {
            console.error('Email ve token zorunludur');
            return;
        }

        // MongoDB veya in-memory'de güncelleme
        if (User) {
            try {
                const user = await User.findOne({ email });

                if (!user) {
                    console.error('Kullanıcı bulunamadı (MongoDB):', email);
                    // Eğer in-memory'de varsa onu güncelle
                    if (inMemoryUsers.has(email)) {
                        const memUser = inMemoryUsers.get(email);
                        memUser.token = token;
                        memUser.updatedAt = new Date();
                        inMemoryUsers.set(email, memUser);
                        console.log(`Token güncellendi (in-memory): ${email}`);
                    }
                    return;
                }

                user.token = token;
                user.updatedAt = Date.now();
                await user.save();

                console.log(`Token güncellendi (MongoDB): ${email}`);
            } catch (dbError) {
                console.error('MongoDB token güncelleme hatası:', dbError);
                // Hata durumunda in-memory'yi güncelle
                if (inMemoryUsers.has(email)) {
                    const memUser = inMemoryUsers.get(email);
                    memUser.token = token;
                    memUser.updatedAt = new Date();
                    inMemoryUsers.set(email, memUser);
                    console.log(`Token güncellendi (in-memory - fallback): ${email}`);
                }
            }
        } else {
            // MongoDB bağlantısı yoksa in-memory'de güncelle
            if (inMemoryUsers.has(email)) {
                const memUser = inMemoryUsers.get(email);
                memUser.token = token;
                memUser.updatedAt = new Date();
                inMemoryUsers.set(email, memUser);
                console.log(`Token güncellendi (in-memory): ${email}`);
            } else {
                console.error('Kullanıcı bulunamadı (in-memory):', email);
            }
        }
    } catch (error) {
        console.error('Token güncelleme hatası:', error);
    }
});

// Bildirim durumu güncellemeleri
socketClient.on('notification-sent', (data) => {
    console.log('Bildirim gönderildi:', data);
    // Bu bilgiyi web arayüzüne iletebiliriz
    ioServer.emit('notification-status-update', { // Değişiklik burada - io yerine ioServer kullan
        type: 'sent',
        ...data
    });
});

socketClient.on('notification-error', (data) => {
    console.error('Bildirim hatası:', data);
    // Bu hatayı web arayüzüne iletebiliriz
    ioServer.emit('notification-status-update', { // Değişiklik burada - io yerine ioServer kullan
        type: 'error',
        ...data
    });
});

// Socket.IO server - Web arayüzü için
const ioServer = socketIO(server); // Değişiklik burada - io yerine ioServer kullan

ioServer.on('connection', (socket) => { // Değişiklik burada - io yerine ioServer kullan
    console.log('Yeni bir istemci bağlandı:', socket.id);

    // Web arayüzünden bildirim gönderme istekleri
    socket.on('send-notification-request', (notificationData) => {
        console.log('Bildirim gönderme isteği alındı:', notificationData);

        // Render backend'e bildirim gönderme isteği ilet
        socketClient.emit('send-notification', notificationData, (response) => {
            // Yanıtı web arayüzüne ilet
            socket.emit('notification-status', response);
        });

        // Web arayüzüne bildirim durumu iletilir
        socket.emit('notification-processing', {
            ...notificationData,
            timestamp: new Date().toISOString()
        });
    });

    // Canlılık kontrolü
    socket.on('ping', () => {
        socket.emit('pong', { time: new Date().toISOString() });
    });

    socket.on('disconnect', () => {
        console.log('İstemci bağlantısı kesildi:', socket.id);
    });
});

// API Routes ve diğer kodlar aynı kalabilir...

// HTML sayfasını servis et
app.get('/', (req, res) => {
    res.sendFile(path.join(__dirname, 'public', 'index.html'));
});

// Sunucuyu başlat
const PORT = process.env.PORT || 3000;
server.listen(PORT, () => {
    console.log(`Sunucu http://localhost:${PORT} adresinde çalışıyor`);
    console.log(`MongoDB bağlantı durumu: ${mongoose.connection.readyState === 1 ? 'Bağlı' : 'Bağlı değil'}`);
    console.log(`In-memory kullanıcı sayısı: ${inMemoryUsers.size}`);
});

// Hata yönetimi
process.on('uncaughtException', (error) => {
    console.error('Yakalanmayan istisna:', error);
});

process.on('unhandledRejection', (reason, promise) => {
    console.error('İşlenmeyen söz reddi:', reason);
});
